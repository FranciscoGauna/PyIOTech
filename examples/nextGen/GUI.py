# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Wed Dec 15 19:12:49 2010

import wx

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode

import sys
import queVars
import time

import pyDaqBoard.DAQScan as DaqS

import GraphPanel as vizFrame


import settingsWindow


class RedirectText:

	def __init__(self, aWxTextCtrl):
		self.out = aWxTextCtrl

	def write(self, string):
		wx.CallAfter(self.out.AppendText, string)
# end wxGlade



class LoggerFrame(wx.Frame):

	VizEnable = True



	def __init__(self, *args, **kwds):
		# begin wxGlade: ThermFrame.__init__
		kwds["style"] = wx.CAPTION | wx.CLOSE_BOX | wx.MINIMIZE_BOX | wx.MAXIMIZE_BOX | wx.SYSTEM_MENU | wx.RESIZE_BORDER | wx.TAB_TRAVERSAL | wx.CLIP_CHILDREN
		wx.Frame.__init__(self, *args, **kwds)





		self.checkboxes = []
		self.vizPanels = []
		self.numChannels = 8


		self.controlsDisableWhenRunning = []

		self.__set_properties()
		self.__createLayoutObjs()
		self.__do_layout()

		


		# end wxGlade
		self.filterTimer = wx.Timer(self)
		self.pollUpdate = wx.Timer(self)
		self.tbUpdate = wx.Timer(self)



		self.Bind(wx.EVT_CLOSE, self.quitApp)
		self.Bind(wx.EVT_TIMER, self.updateFilter, self.filterTimer)
		self.Bind(wx.EVT_TIMER, self.updateGUI, self.tbUpdate)


		if queVars.cnf.openOnStart:
			self.comSelect.SetSelection(0)
			self.setCOMPort(None)


	def __comSelectComboBox(self):
		availableSerPortList = []

		# Should generate list of IOTech Devices
		print "Needs to be Implemented"

		return wx.ComboBox(self, -1, choices=availableSerPortList, style=wx.CB_DROPDOWN)

	def __set_properties(self):
		# begin wxGlade: ThermFrame.__set_properties
		self.SetTitle("IOTech Data Logger")
		self.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_BTNFACE))

		self.SetSize((1000, 685))
		self.SetMinSize((1000, 600))

		# end wxGlade

	def __controlButtonsSizer(self):
		controlButtonsSizer = wx.BoxSizer(wx.HORIZONTAL)



		self.spacerPanel1 = wx.Panel(self, -1)
		self.spacerPanel2 = wx.Panel(self, -1)

		self.comSelectLabel = wx.StaticText(self, -1, "Device Select: ")
		controlButtonsSizer.Add(self.comSelectLabel, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 3)

		self.comSelect = self.__comSelectComboBox()
		controlButtonsSizer.Add(self.comSelect, 0, 0, 0)
		self.Bind(wx.EVT_COMBOBOX, self.setCOMPort, self.comSelect)


		self.openIOTechButton = wx.ToggleButton(self, -1, "Open IOTech Device")
		controlButtonsSizer.Add(self.openIOTechButton, 0, 0, 0)
		self.Bind(wx.EVT_TOGGLEBUTTON, self.iotechOpenToggle, self.openIOTechButton)

		controlButtonsSizer.Add(self.spacerPanel1, 1, wx.EXPAND, 0)

		self.deviceSettingsButton = wx.Button(self, -1, "Acquisition Settings")
		controlButtonsSizer.Add(self.deviceSettingsButton, 0, 0, 0)

		self.Bind(wx.EVT_BUTTON, self.openSettingsWindow, self.deviceSettingsButton)

		controlButtonsSizer.Add(self.spacerPanel2, 1, wx.EXPAND, 0)

		self.takeDataButton = wx.ToggleButton(self, -1, "Start Taking Data")
		controlButtonsSizer.Add(self.takeDataButton, 0, 0, 0)

		self.Bind(wx.EVT_TOGGLEBUTTON, self.toggleAcquisition, self.takeDataButton)

		self.controlsDisableWhenRunning.append(self.comSelect)

		return controlButtonsSizer

	def __settingsControlSizer(self):

		settingsControlSizer = wx.BoxSizer(wx.HORIZONTAL)

		self.logEnBtn = wx.ToggleButton(self, -1, "Log to File")
		settingsControlSizer.Add(self.logEnBtn, 0, wx.EXPAND, 0)

		self.controlsDisableWhenRunning.append(self.logEnBtn)

		infoText = "Log is saved to current directory. File is named \"Datalog - Y M D, AM/PM, H-M-S.csv\""

		self.logInfoLabel = wx.StaticText(self, -1, infoText)
		settingsControlSizer.Add(self.logInfoLabel, 0, wx.ALL, 2)

		self.spacerPane2 = wx.Panel(self, -1)
		settingsControlSizer.Add(self.spacerPane2, 1, wx.EXPAND, 0)

		self.visualizationEnBtn = wx.ToggleButton(self, -1, "Turn Visualizations On ")
		settingsControlSizer.Add(self.visualizationEnBtn, 0, 0, 0)
		self.visualizationEnBtn.Value = True
		self.Bind(wx.EVT_TOGGLEBUTTON, self.visualizationToggle, self.visualizationEnBtn)

		#self.layoutTestBtn = wx.Button(self, -1, "Layout")
		#settingsControlSizer.Add(self.layoutTestBtn, 0, 0, 0)
		#self.Bind(wx.EVT_BUTTON, self.layoutTest, self.layoutTestBtn)


		return settingsControlSizer


	def __statusWindowSizer(self):

		statusWinSizer = wx.BoxSizer(wx.HORIZONTAL)


		self.statusWin = wx.TextCtrl(self, -1, "", style=wx.TE_MULTILINE | wx.TE_READONLY)
		statusWinSizer.Add(self.statusWin, 1, wx.EXPAND, 0)

		if not queVars.cnf.noRedir:
			redir = RedirectText(self.statusWin)
			#sys.stdout=redir
			#sys.sterr=redir
		print "Starting Up..."

		statusWinSizer.Add(self.__channelSelectSizer(), 0, 0, 0)

		return statusWinSizer

	def __channelSelectSizer(self):

		channelSelectSizer = wx.BoxSizer(wx.VERTICAL)

		infoText = "Select chanels to graph:"

		self.logInfoLabel = wx.StaticText(self, -1, infoText)
		channelSelectSizer.Add(self.logInfoLabel, 0, wx.ALL, 2)
		for x in range(self.numChannels):
			checkboxLabel = "Channel %d" % (x + 1)
			checkbox = wx.CheckBox(self, -1, label=checkboxLabel)
			self.checkboxes.append(checkbox)

			channelSelectSizer.Add(checkbox, 1, 0, 0)

			self.controlsDisableWhenRunning.append(checkbox)


		#self.layoutTestBtn = wx.Button(self, -1, "Layout")
		#settingsControlSizer.Add(self.layoutTestBtn, 0, 0, 0)
		#self.Bind(wx.EVT_BUTTON, self.layoutTest, self.layoutTestBtn)
		self.checkboxes[0].SetValue(True)
		self.checkboxes[1].SetValue(True)
		#self.checkboxes[2].SetValue(True)
		#self.checkboxes[3].SetValue(True)
		return channelSelectSizer

	def __createVisualiztionPanels(self):

		print "Starting Data Visualizer"

		self.IOTechConfig.circularBuffer = queVars.RingBuffer(1000)
		
		self.visWinSizer = wx.BoxSizer(wx.VERTICAL)
		panelsEnabled = []

		for checkbox in self.checkboxes:
			if checkbox.IsChecked():
				panelsEnabled.append(checkbox.Label)
		if not panelsEnabled:
			print "No Chanels selected to Graph!"
		for panelEnabled in panelsEnabled:
			panelEnabled = int(panelEnabled.split()[-1]) - 1

			visPanel = vizFrame.GraphPanel(self, -1, dataChannel=panelEnabled, configItem=self.IOTechConfig)
			hLine = wx.StaticLine(self, wx.HORIZONTAL)
			self.vizPanels.append(visPanel)
			self.visWinSizer.Add(visPanel, 1, wx.EXPAND, 0)
			self.vizPanels.append(hLine)
			self.visWinSizer.Add(hLine, 0, wx.EXPAND, 0)

		self.mainWindowSizer.Insert(3, self.visWinSizer, proportion=2,  flag=wx.EXPAND)

		self.visualizationEnBtn.Label = "Turn Visualizations Off"


	def __destroyVisualiztionPanels(self):

		print "Stopping Data Visualizer"

		while self.vizPanels:				# Delete all the graph panels
			self.vizPanels.pop().Destroy()

		self.mainWindowSizer.Detach(self.visWinSizer)
		self.visWinSizer.Destroy()

		self.visualizationEnBtn.Label = "Turn Visualizations On"

		self.Fit()

	def __toggleVizObj(self, enable=True):
		if self.VizEnable and enable:
			#print "VizPanel"

			self.__createVisualiztionPanels()

		else:
			self.__destroyVisualiztionPanels()

		self.Layout()


	def __setupIOTech(self):

		self.IOTechConfig = DaqS.IOTechConfiguration()

		#self.IOTechConfig.freq = 5000.0
		#self.IOTechConfig.iterScans = 1000

		self.IOTechConfig.circularBuffer = queVars.RingBuffer(100000)
		#self.IOTechConfig.logDataRam = False
		if self.IOTechConfig.deviceNameStr:

			self.daqint = DaqS.IOTechInterface(self.IOTechConfig)
		else:
			self.daqint = None
			print "No Device Connected"

	def __startAquisition(self):

		for control in self.controlsDisableWhenRunning:
			control.Disable()

		if self.daqint:
			self.daqint.startCapture(writeFile=self.logEnBtn.Value)


	def __stopAcquisition(self):
		if self.daqint:
			self.daqint.stopCapture()

		for control in self.controlsDisableWhenRunning:
			control.Enable()

	def __closeIOTech(self):
		if self.daqint:
			self.daqint.closeDevice()


	def __createLayoutObjs(self):

		self.DestroyChildren()			# Kill the Children!

		descText = "I2C Temperature Sensor Logger"

		self.headerDescriptionLabel = wx.StaticText(self, -1, descText)
		self.headerDescriptionLabel.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "MS Shell Dlg 2"))
		self.controlButtonsSizer = self.__controlButtonsSizer()


		self.settingsControlSizer = self.__settingsControlSizer()
		self.statusWindowSizer = self.__statusWindowSizer()

		#print "Starting Up..."


	def __do_layout(self):

		self.mainWindowSizer = wx.BoxSizer(wx.VERTICAL)


		self.mainWindowSizer.Add(self.headerDescriptionLabel, 0, wx.ALL, 5)
		self.mainWindowSizer.Add(self.controlButtonsSizer, 0, wx.EXPAND, 0)
		self.mainWindowSizer.Add(self.settingsControlSizer, 0, wx.EXPAND, 0)

		self.mainWindowSizer.Add(self.statusWindowSizer, 0, wx.EXPAND, 0)


		self.ClearBackground()
		self.SetSizer(self.mainWindowSizer)

		self.Layout()

		#print "Starting Up..."

	def iotechOpenToggle(self, event):
		if self.openIOTechButton.GetValue():
			self.__setupIOTech()
			self.VizEnable = queVars.cnf.visualization
			self.__toggleVizObj()
		else:
			self.__closeIOTech()
			self.__toggleVizObj(enable=False)

	def toggleAcquisition(self, event):
		if self.openIOTechButton.GetValue():
			if self.takeDataButton.Value:
				self.__startAquisition()
			else:
				self.__stopAcquisition()
		else:
			print "You need to open the IOTech device first"


	def setCOMPort(self, event): 							# wxGlade: ThermFrame.<event_handler>
		self.portStr = self.comSelect.GetValue()
		#print self.portStr

		raise NotImplementedError

		'''
		for x in range(d2xx.createDeviceInfoList()):
			temp = d2xx.getDeviceInfoDetail(x)
			if temp['serial'] in self.portStr:
				#print temp['serial']
				#print "Sending Portnum %s" % portnumber
				queVars.cnf.Qout.put({"OpenPort": temp['serial']})  #open serial port
		'''
		#event.Skip()
	def openSettingsWindow(self, event):
		self.Disable()
		settingsWindow.start(self)
		self.Enable()

	def quitApp(self, event): 								# wxGlade: MainFrame.<event_handler>
		print "Exiting"
		self.__stopAcquisition()
		queVars.cnf.Shutdown = True
		time.sleep(.1)

		if queVars.cnf.serThread:
			queVars.cnf.serThread.join(.25)

		if self.VizEnable:
			try:
				self.visWinSizer.Destroy()
			except:
				pass
		self.IOTechConfig.saveSettings()
		self.__closeIOTech()
		print "GUI Exiting"
		wx.Exit()

	def updateFilter(self, event):
		print "filterfired"
		pass

	def visualizationToggle(self, event):
		#print (event.GetEventObject().Value)
		self.VizEnable = (event.GetEventObject().Value)
		#print self.VizEnable
		self.__toggleVizObj()


	def layoutTest(self, event):
		self.ClearBackground()
		self.Layout()

	def updateGUI(self, event): 							# wxGlade: MainW.<event_handler>		Main Polling Loop
		tb = self.logEnBtn.GetValue()
		#print "tb", tb
		if (queVars.cnf.logEn == False) and (tb == True):
			queVars.cnf.logName = "IIC Temp Log %s, %s.txt" % (time.time(), time.strftime("%Y-%m-%d %H;%M;%S;", time.gmtime()))
			queVars.cnf.logEn = True
			print "Logging Started"
			print "Logging to file: %s" % queVars.cnf.logName

		if (queVars.cnf.logEn) == True and (tb == False):
			queVars.cnf.logEn = False
			print "Logging Stopped"

		pass

# end of class ThermFrame


class MyApp(wx.App):

	def OnInit(self):
		wx.InitAllImageHandlers()
		TemperatureFrame = LoggerFrame(None, -1, "")
		self.SetTopWindow(TemperatureFrame)

		#Set up the filter timer, and stop it.
		#It can then be restarted by simply calling filterTimer.Start()
		TemperatureFrame.filterTimer.Start((1000 / 30), 0)		# 30 hz update rate
		TemperatureFrame.filterTimer.Stop()


		TemperatureFrame.tbUpdate.Start(25, 0)
		TemperatureFrame.Show()
		return 1
